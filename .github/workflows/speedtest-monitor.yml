name: Speedtest Server Monitor

on:
  schedule:
    # Chạy hàng tuần thay vì hàng ngày để tránh spam
    - cron: '0 2 * * 0'  # Chủ nhật lúc 2:00 UTC
  workflow_dispatch: # Cho phép chạy thủ công

jobs:
  check-speedtest-servers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # Cài đặt speedtest-cli từ pip thay vì apt (version mới hơn)
        sudo apt-get update
        sudo apt-get install -y python3-pip curl jq perl
        pip3 install speedtest-cli
        
        # Thêm pip bin vào PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Setup network optimization
      run: |
        # Random delay để tránh detection
        sleep $((RANDOM % 30 + 10))
        
    - name: Check servers availability
      run: |
        # Đọc danh sách server từ bench.sh
        echo "Doc danh sach server tu bench.sh..."
        
        mapfile -t server_lines < <(grep "speed_test '[0-9]" bench.sh)
        
        if [ ${#server_lines[@]} -eq 0 ]; then
          echo "ERROR: Khong tim thay server nao trong bench.sh"
          exit 1
        fi
        
        # Function get server list một lần và cache
        get_server_list() {
          echo "Getting complete server list from speedtest-cli..."
          timeout 60s speedtest-cli --list 2>/dev/null || echo ""
        }
        
        # Function test server bằng cách kiểm tra server list
        check_server_exists() {
          local server_id="$1"
          local server_list="$2"
          
          echo "Checking server $server_id in server list..."
          
          # Kiểm tra exact match trong server list
          # Format: "   1234) Server Name (Location, Country) [Distance km]"
          local server_match
          server_match=$(echo "$server_list" | grep -E "^[[:space:]]*${server_id}\)" | head -1)
          
          if [[ -n "$server_match" ]]; then
            echo "SUCCESS: Server $server_id found: $server_match"
            return 0
          fi
          
          echo "FAILED: Server $server_id not in server list"
          return 1
        }
        
        # Function tìm server thay thế chính xác
        find_replacement_server() {
          local location="$1"
          local current_id="$2"
          local server_list="$3"
          
          echo "Tim server thay the cho $location (excluding $current_id)..."
          
          if [[ -z "$server_list" ]]; then
            echo "ERROR: Server list empty, cannot find replacement"
            return 1
          fi
          
          # Định nghĩa search patterns dựa trên location
          local search_patterns=()
          
          case "$location" in
            *"San Jose"*|*"US"*|*"United States"*|*"California"*) 
              search_patterns=("San Jose" "California" "United States" "US") ;;
            *"France"*|*"FR"*|*"Paris"*)
              search_patterns=("France" "Paris" "FR") ;;
            *"Amsterdam"*|*"Netherlands"*|*"NL"*)
              search_patterns=("Amsterdam" "Netherlands" "NL") ;;
            *"Hong Kong"*|*"HK"*)
              search_patterns=("Hong Kong" "HK") ;;
            *"Singapore"*|*"SG"*)
              search_patterns=("Singapore" "SG") ;;
            *"Tokyo"*|*"Japan"*|*"JP"*)
              search_patterns=("Tokyo" "Japan" "JP") ;;
            *"FPT"*|*"VNPT"*|*"Viettel"*|*"Vietnam"*|*"VN"*|*"HN"*|*"HCM"*)
              search_patterns=("Vietnam" "VN" "FPT" "VNPT" "Viettel" "Ho Chi Minh" "Hanoi") ;;
            *)
              search_patterns=("Vietnam" "VN") ;;
          esac
          
          # Tìm candidate servers
          local candidate_servers=()
          
          for pattern in "${search_patterns[@]}"; do
            echo "Searching for pattern: $pattern"
            
            # Parse server list với regex chính xác
            while IFS= read -r line; do
              if [[ "$line" =~ ^[[:space:]]*([0-9]+)\)[[:space:]]*(.+)$ ]]; then
                local found_id="${BASH_REMATCH[1]}"
                local found_desc="${BASH_REMATCH[2]}"
                
                # Kiểm tra pattern match và loại trừ current server
                if [[ "$found_id" != "$current_id" ]] && [[ "$found_desc" =~ $pattern ]]; then
                  candidate_servers+=("$found_id")
                  echo "Found candidate: $found_id - $found_desc"
                fi
              fi
            done <<< "$server_list"
            
            # Nếu đã tìm thấy candidates, test ngay
            if [ ${#candidate_servers[@]} -gt 0 ]; then
              break
            fi
          done
          
          if [ ${#candidate_servers[@]} -eq 0 ]; then
            echo "WARNING: No candidate servers found for patterns: ${search_patterns[*]}"
            return 1
          fi
          
          # Test từng candidate chỉ bằng cách kiểm tra trong server list
          for candidate_id in "${candidate_servers[@]}"; do
            echo "Testing candidate server $candidate_id..."
            
            # Chỉ kiểm tra có trong server list hay không
            local candidate_match
            candidate_match=$(echo "$server_list" | grep -E "^[[:space:]]*${candidate_id}\)" | head -1)
            
            if [[ -n "$candidate_match" ]]; then
              echo "SUCCESS: Candidate $candidate_id found in server list"
              echo "Details: $candidate_match"
              echo "$candidate_id"
              return 0
            else
              echo "FAILED: Candidate $candidate_id not in server list"
            fi
            
            # Delay giữa các test
            sleep 1
          done
          
          echo "ERROR: No working replacement server found for $location"
          return 1
        }
        
        # Get server list một lần để dùng chung
        echo "Fetching official speedtest server list..."
        SERVER_LIST=$(get_server_list)
        
        if [[ -z "$SERVER_LIST" ]]; then
          echo "ERROR: Cannot fetch server list from speedtest-cli"
          exit 1
        fi
        
        echo "Server list fetched successfully. Sample:"
        echo "$SERVER_LIST" | head -5
        echo "..."
        echo "Total servers in list: $(echo "$SERVER_LIST" | wc -l)"
        
        CHANGED=false
        FAILED_SERVERS=()
        REPLACED_SERVERS=()
        
        echo "Kiem tra ${#server_lines[@]} speedtest servers..."
        echo "=================================="
        
        # Kiểm tra từng server
        for line in "${server_lines[@]}"; do
          server_id=$(echo "$line" | sed -n "s/.*speed_test '\([0-9]*\)'.*/\1/p")
          location=$(echo "$line" | sed -n "s/.*speed_test '[0-9]*' '\([^']*\)'.*/\1/p")
          
          if [[ -z "$server_id" || -z "$location" ]]; then
            echo "WARNING: Cannot parse line: $line"
            continue
          fi
          
          echo "Kiem tra Server $server_id ($location)"
          
          # Random delay để tránh rate limiting
          sleep $((RANDOM % 5 + 3))
          
          if check_server_exists "$server_id" "$SERVER_LIST"; then
            echo "OK: Server $server_id"
          else
            echo "FAILED: Server $server_id"
            FAILED_SERVERS+=("$server_id:$location")
            
            # Tìm server thay thế
            echo "Tim server thay the cho $location..."
            new_server_id=$(find_replacement_server "$location" "$server_id" "$SERVER_LIST")
            
            # Validate new_server_id
            if [[ -n "$new_server_id" && "$new_server_id" =~ ^[0-9]+$ && "$new_server_id" != "$server_id" ]]; then
              echo "SUCCESS: Tim thay server thay the: $new_server_id cho $location"
              
              # Backup bench.sh
              cp bench.sh bench.sh.backup
              
              # Thay thế trong bench.sh
              perl -i -pe "s/speed_test '$server_id'/speed_test '$new_server_id'/g" bench.sh
              
              # Verify thay đổi
              if grep -q "speed_test '$new_server_id'" bench.sh && ! grep -q "speed_test '$server_id'" bench.sh; then
                CHANGED=true
                REPLACED_SERVERS+=("$server_id -> $new_server_id ($location)")
                echo "UPDATE: Da cap nhat bench.sh: $server_id -> $new_server_id"
                rm -f bench.sh.backup
              else
                echo "ERROR: Khong the cap nhat bench.sh, rollback..."
                mv bench.sh.backup bench.sh
              fi
            else
              echo "WARNING: Khong tim thay server thay the hop le cho $location"
            fi
          fi
          
          echo "---"
        done
        
        echo "=================================="
        echo "Tong ket:"
        echo "- So server failed: ${#FAILED_SERVERS[@]}"
        echo "- So server replaced: ${#REPLACED_SERVERS[@]}"
        echo "- Changed: $CHANGED"
        
        if [ ${#FAILED_SERVERS[@]} -gt 0 ]; then
          echo ""
          echo "Failed servers:"
          for failed in "${FAILED_SERVERS[@]}"; do
            echo "  * $failed"
          done
        fi
        
        if [ ${#REPLACED_SERVERS[@]} -gt 0 ]; then
          echo ""
          echo "Replaced servers:"
          for replaced in "${REPLACED_SERVERS[@]}"; do
            echo "  * $replaced"
          done
        fi
        
        # Safety check
        if [ ${#FAILED_SERVERS[@]} -gt 6 ]; then
          echo "WARNING: Too many servers failed (${#FAILED_SERVERS[@]}), possible network issue."
          if [ ${#REPLACED_SERVERS[@]} -eq 0 ]; then
            CHANGED=false
            echo "ERROR: No successful replacements, canceling commit."
          fi
        fi
        
        echo "CHANGED=$CHANGED" >> $GITHUB_ENV
        
        # Tạo summary cho GitHub Actions
        {
          echo "## Speedtest Server Check Results"
          echo ""
          echo "- **Failed servers:** ${#FAILED_SERVERS[@]}"
          echo "- **Replaced servers:** ${#REPLACED_SERVERS[@]}"
          echo "- **Changes made:** $CHANGED"
          echo ""
          if [ ${#REPLACED_SERVERS[@]} -gt 0 ]; then
            echo "### Successful Replacements:"
            for replaced in "${REPLACED_SERVERS[@]}"; do
              echo "- $replaced"
            done
          fi
          if [ ${#FAILED_SERVERS[@]} -gt 0 ]; then
            echo ""
            echo "### Failed Servers:"
            for failed in "${FAILED_SERVERS[@]}"; do
              echo "- $failed"
            done
          fi
        } >> $GITHUB_STEP_SUMMARY
        
    - name: Commit và push thay đổi
      if: env.CHANGED == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "Thay doi trong bench.sh:"
        git diff bench.sh
        
        if git diff --quiet bench.sh; then
          echo "WARNING: Khong co thay doi thuc te trong bench.sh"
          exit 0
        fi
        
        git add bench.sh
        git commit -m "Auto-update speedtest servers - $(date +'%Y-%m-%d %H:%M UTC')"
        git push
        
        echo "SUCCESS: Da commit va push thay doi thanh cong!"
