# .github/workflows/update-speedtest-servers.yml
name: Auto Update Speedtest Servers

on:
  schedule:
    # Run every Sunday at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Manual trigger
  push:
    paths:
      - '.github/workflows/update-speedtest-servers.yml'

jobs:
  update-servers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl jq
        
    - name: Download Speedtest CLI
      run: |
        wget -O speedtest.tgz https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz
        mkdir -p speedtest-cli
        tar zxf speedtest.tgz -C ./speedtest-cli
        chmod +x ./speedtest-cli/speedtest
        
    - name: Test and Update Server Configuration
      run: |
        # Create server testing script
        cat > test_servers.sh << 'EOF'
        #!/bin/bash
        
        # Colors
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        # Server groups with fallback IDs
        declare -A SERVERS=(
            ["us"]="68864 13152 11093 23856 54321 16847 18531"
            ["eu"]="24215 21541 13704 28922 50467 23844 21569" 
            ["sg"]="7311 13538 45168 39832 52469"
            ["jp"]="50467 6087 15047 21569 24333"
            ["vn_fpt"]="2515 2552 23844 54123"
            ["vn_vnpt"]="17758 17757 54123 23957"
            ["vn_viettel"]="54812 59915 23844 52469"
        )
        
        # Test server function
        test_server() {
            local server_id="$1"
            echo "Testing server $server_id..."
            
            if timeout 20 ./speedtest-cli/speedtest --server-id="$server_id" --accept-license --accept-gdpr >/dev/null 2>&1; then
                echo -e "${GREEN}✓ Server $server_id is working${NC}"
                return 0
            else
                echo -e "${RED}✗ Server $server_id failed${NC}"
                return 1
            fi
        }
        
        # Get server info
        get_server_info() {
            local server_id="$1"
            local server_info=""
            
            # Try to get server list and extract info
            if ./speedtest-cli/speedtest --servers --format=json > servers.json 2>/dev/null; then
                server_info=$(jq -r ".servers[] | select(.id == $server_id) | \"\(.name), \(.location)\"" servers.json 2>/dev/null)
            fi
            
            if [ -z "$server_info" ]; then
                server_info="Server $server_id"
            fi
            
            echo "$server_info"
        }
        
        # Find working server for region
        find_working_server() {
            local region="$1"
            local server_list="${SERVERS[$region]}"
            
            echo -e "${YELLOW}Testing $region servers...${NC}"
            
            for server_id in $server_list; do
                if test_server "$server_id"; then
                    local server_name=$(get_server_info "$server_id")
                    echo "$region=$server_id,$server_name"
                    return 0
                fi
            done
            
            echo -e "${RED}No working servers found for $region${NC}"
            return 1
        }
        
        # Main execution
        echo "# Speedtest Server Configuration" > working_servers.conf
        echo "# Auto-updated: $(date)" >> working_servers.conf
        echo "# Generated by GitHub Actions" >> working_servers.conf
        echo "" >> working_servers.conf
        echo "default=,Speedtest.net Global" >> working_servers.conf
        
        # Test each region
        for region in us eu sg jp vn_fpt vn_vnpt vn_viettel; do
            if result=$(find_working_server "$region"); then
                echo "$result" >> working_servers.conf
            else
                echo "# $region - No working servers found" >> working_servers.conf
            fi
        done
        
        echo -e "${GREEN}Server configuration updated successfully!${NC}"
        cat working_servers.conf
        EOF
        
        chmod +x test_servers.sh
        ./test_servers.sh
        
    - name: Update Script with New Servers
      run: |
        # Create update script to modify the main bench script
        cat > update_script.py << 'EOF'
        #!/usr/bin/env python3
        import re
        import sys
        
        def update_bench_script():
            # Read the working servers config
            servers = {}
            try:
                with open('working_servers.conf', 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            region, info = line.split('=', 1)
                            if ',' in info:
                                server_id, server_name = info.split(',', 1)
                                servers[region] = {'id': server_id, 'name': server_name}
            except FileNotFoundError:
                print("working_servers.conf not found")
                return False
            
            # Read the bench script
            try:
                with open('bench.sh', 'r') as f:
                    content = f.read()
            except FileNotFoundError:
                print("bench.sh not found, creating new one based on enhanced script")
                return False
            
            # Update the speed() function
            speed_function_pattern = r'speed\(\) \{[^}]*\}'
            
            new_speed_function = '''speed() {
        load_server_config
        
        # Test default speedtest.net
        speed_test "${SERVER_IDS[default]}" "${SERVER_NAMES[default]:-Speedtest.net Global}"
        
        # Test configured servers'''
            
            for region, info in servers.items():
                if region != 'default' and info['id']:
                    new_speed_function += f'''
        speed_test '{info["id"]}' '{info["name"]}\''''
            
            new_speed_function += '''
    }'''
            
            # Replace the speed function
            updated_content = re.sub(speed_function_pattern, new_speed_function, content, flags=re.DOTALL)
            
            # Write back to file
            with open('bench.sh', 'w') as f:
                f.write(updated_content)
            
            print("Script updated successfully!")
            return True
        
        if __name__ == "__main__":
            update_bench_script()
        EOF
        
        python3 update_script.py
        
    - name: Create Summary Report
      run: |
        echo "## Speedtest Server Update Report" > server_report.md
        echo "Generated on: $(date)" >> server_report.md
        echo "" >> server_report.md
        echo "### Working Servers Found:" >> server_report.md
        echo "" >> server_report.md
        
        while IFS='=' read -r region info; do
            if [[ "$region" != \#* && -n "$region" && -n "$info" ]]; then
                server_id=$(echo "$info" | cut -d',' -f1)
                server_name=$(echo "$info" | cut -d',' -f2-)
                echo "- **$region**: Server ID $server_id - $server_name" >> server_report.md
            fi
        done < working_servers.conf
        
        echo "" >> server_report.md
        echo "### Configuration File:" >> server_report.md
        echo "\`\`\`" >> server_report.md
        cat working_servers.conf >> server_report.md
        echo "\`\`\`" >> server_report.md
        
        cat server_report.md
        
    - name: Commit Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add working_servers.conf bench.sh server_report.md
        git commit -m "Auto-update speedtest servers - $(date '+%Y-%m-%d')"
        
    - name: Push Changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
        
    - name: Create Issue if Servers Failed
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'Speedtest Server Update Failed';
          const body = `
          ## Speedtest Server Update Failed
          
          The automated speedtest server update failed on ${new Date().toISOString()}.
          
          Please check the workflow logs and manually update the server configuration if needed.
          
          ### Actions to take:
          1. Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          2. Manually test servers if needed
          3. Update the configuration file
          
          This issue was automatically created by GitHub Actions.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automated']
          });
          
    - name: Cleanup
      if: always()
      run: |
        rm -f speedtest.tgz test_servers.sh update_script.py servers.json
        rm -rf speedtest-cli
